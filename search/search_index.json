{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"In\u00edcio","text":""},{"location":"#1-disciplina-de-compiladores","title":"1. Disciplina de Compiladores","text":"<p>Este \u00e9 um projeto que foi realizado por alunos da Universidade de Bras\u00edlia durante a disciplina de Compiladores, orientada pelo professore S\u00e9rgio Freitas.</p>"},{"location":"#2-projeto","title":"2. Projeto","text":"<p>Em suma o projeto desenvolvido busca compreender o funcionamento de um compilador e aplicar seus conceitos de forma pr\u00e1tica. O compilador desenvolvido conta com:</p> <ul> <li>An\u00e1lise l\u00e9xica com Flex</li> <li>Analisador sint\u00e1tico com Bison</li> <li>An\u00e1lise sem\u00e2ntica b\u00e1sica</li> <li>Gerador de c\u00f3digo intermedi\u00e1rio simples</li> <li>Gerador de c\u00f3digo final</li> </ul>"},{"location":"#3-equipe","title":"3. Equipe","text":"<p>A equipe de desenvolvedores \u00e9 composta por 6 membros do curso de Engenharia de Software da Universidade de Bras\u00edlia.</p> Arthur Suares Brunna Louise Genilson Junior Lais Ramos Mariana Let\u00edcia Taynara Marcellos"},{"location":"#4-historico-de-versoes","title":"4. Hist\u00f3rico de Vers\u00f5es","text":"<p>A Tabela 1 registra o hist\u00f3rico de vers\u00e3o desse documento.</p> Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 27/03/2025 1.0 Primeira Vers\u00e3o do artefato Arthur - 27/03/2025 1.1 Adiciona equipe e hist\u00f3rico de vers\u00f5es Brunna -  Tabela 1: Hist\u00f3rico de Vers\u00f5es  Autor(es): Brunna  Fonte: Autor(es)"},{"location":"acompanhamento/semana-01/","title":"Semana 1","text":""},{"location":"acompanhamento/semana-01/#1-resumo-da-semana","title":"1. Resumo da Semana","text":"<p>Semana de ambienta\u00e7\u00e3o da disciplina. Formamos um grupo e optamos pelo desenvolvimento de um compilador para nosso projeto. </p>"},{"location":"acompanhamento/semana-01/#2-tarefas-realizadas","title":"2. Tarefas Realizadas","text":"<ul> <li> Cria\u00e7\u00e3o de Reposit\u00f3rio: um reposit\u00f3rio foi criado para desenvolver e documentar o projeto.</li> <li> Deploy de GitHub Pages: deploy de branch espec\u00edfica para cria\u00e7\u00e3o de site com a documenta\u00e7\u00e3o do projeto. </li> <li> Configura\u00e7\u00e3o de ambiente de desenvolvimento: utilizando o roteiro disponibilizado pelo professor, configuramos o ambiente de desenvolvimento com as ferramentas necess\u00e1rias para o desenvolvimento de um compilador.</li> </ul>"},{"location":"acompanhamento/semana-01/#3-problemas-e-desafios","title":"3. Problemas e Desafios","text":"<ul> <li>Configura\u00e7\u00e3o de ambiente no Windows: os participantes relataram dificuldades para configurar o ambiente no Windows.</li> </ul>"},{"location":"acompanhamento/semana-01/#4-proximos-passos","title":"4. Pr\u00f3ximos Passos","text":"<ul> <li>Come\u00e7ar a estudar compiladores</li> <li>Decidir linguagens abordadas no projeto</li> <li>Fazer cronograma</li> <li>Definir SCRUM Master</li> <li>Estabelecer regras e boas pr\u00e1ticas para o projeto</li> </ul>"},{"location":"acompanhamento/semana-01/#5-historico-de-versoes","title":"5. Hist\u00f3rico de Vers\u00f5es","text":"<p>A Tabela 1 registra o hist\u00f3rico de vers\u00e3o desse documento.</p> Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 27/03/2025 1.0 Primeira Vers\u00e3o do artefato da Semana 01 Brunna -  Tabela 1: Hist\u00f3rico de Vers\u00f5es  Autor(es): Brunna  Fonte: Autor(es)"},{"location":"acompanhamento/semana-02/","title":"Semana 2","text":""},{"location":"acompanhamento/semana-02/#1-resumo-da-semana","title":"1. Resumo da Semana","text":"<p>Semana em que iniciamos os estudos em compiladores.</p>"},{"location":"acompanhamento/semana-02/#2-tarefas-realizadas","title":"2. Tarefas Realizadas","text":"<ul> <li> Linguagem dos Compiladores: o grupo decidiu que o compilador ser\u00e1 da linguagem Python para C.</li> <li> Exerc\u00edcio em sala: desenvolvemos o exerc\u00edcio proposto em sala, que a partir de um compilador que reconhecia n\u00fameros inteiros, dever\u00edamos aprimor\u00e1-lo para reconhecer identificadores. Clique aqui para acessar a pasta com o c\u00f3digo.</li> </ul>"},{"location":"acompanhamento/semana-02/#3-problemas-e-desafios","title":"3. Problemas e Desafios","text":"<ul> <li>O primeiro contato com bison e flex foi dif\u00edcil para o grupo. Apenas o Arthur conseguiu resolver o exerc\u00edcio, e ele ensinou aos demais integrantes do grupo.</li> </ul>"},{"location":"acompanhamento/semana-02/#4-proximos-passos","title":"4. Pr\u00f3ximos Passos","text":"<ul> <li>Estudar mais sobre flex e bison.</li> <li>Iniciar o projeto.</li> </ul>"},{"location":"acompanhamento/semana-02/#5-historico-de-versoes","title":"5. Hist\u00f3rico de Vers\u00f5es","text":"<p>A Tabela 1 registra o hist\u00f3rico de vers\u00e3o desse documento.</p> Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 02/04/2025 1.0 Primeira Vers\u00e3o do artefato da Semana 02 Brunna -  Tabela 1: Hist\u00f3rico de Vers\u00f5es  Autor(es): Brunna  Fonte: Autor(es)"},{"location":"analisadores/analisador-lexico/","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor dd/mm/yyyy 1.0 - - -"},{"location":"analisadores/analisador-semantico/","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor dd/mm/yyyy 1.0 - - -"},{"location":"analisadores/analisador-sintatico/","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor dd/mm/yyyy 1.0 - - -"},{"location":"entrega1/cronograma/","title":"3. Cronograma de sprints","text":""},{"location":"entrega1/cronograma/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O objetivo do cronograma \u00e9 organizar a equipe em rela\u00e7\u00e3o as entregas durante o desenvolvimento do compilador. Sendo assim, atrav\u00e9s da metodologia Scrum, constru\u00edmos um cronograma com esse objetivo.</p>"},{"location":"entrega1/cronograma/#planejamento-da-equipe","title":"Planejamento da Equipe","text":"<p>Na tabela 1 abaixo, est\u00e3o descritas a enumera\u00e7\u00e3o de sprint, suas dura\u00e7\u00f5es, os pontos de controle(entregas), objetivos, resultados esperados e a pessoa respons\u00e1vel pelo acompanhamento semanal. Dessa forma, ser\u00e1 poss\u00edvel visualizar de maneira mais clara as atividades que deveremos fazer na semana e como se organizar.</p> Sprints Dura\u00e7\u00e3o Pontos de controle Objetivos Resultado esperado Respons\u00e1vel pelo acompanhamento semanal 1 24/03-28/03 Montar a equipe e configurar ambiente de desenvolvimento Equipe montada e ambiente de desenvolvimento da maioria dos integrantes funcionando Brunna 2 31/03-04/04 Definir o compilador e suas linguagens (Python \u2192 C) Ambiente funcionando para todos; linguagens definidas Brunna 3 07/04-11/04 Definir issues principais do analisador l\u00e9xico e documentar o projeto Documenta\u00e7\u00e3o inicial pronta (escopo, linguagem escolhida, justificativas) Arthur 4 14/04-18/04 Finalizar analisador l\u00e9xico e documenta\u00e7\u00f5es do P1 Issues do l\u00e9xico conclu\u00eddas; in\u00edcio do sint\u00e1tico Genilson 5 21/04-25/04 Desenvolver analisador sint\u00e1tico (atribui\u00e7\u00f5es, fun\u00e7\u00f5es, condicionais, indenta\u00e7\u00e3o) Continua\u00e7\u00e3o do analisador sint\u00e1tico La\u00eds fim de semana 25/04-28/04 P1 Ajustes finais e prepara\u00e7\u00e3o para a apresenta\u00e7\u00e3o do P1 Compilador pronto para demonstra\u00e7\u00e3o b\u00e1sica Mariana 6 28/04-02/05 Avan\u00e7ar no analisador sint\u00e1tico (express\u00f5es, operadores, estruturas de repeti\u00e7\u00e3o b\u00e1sicas) Sint\u00e1tico lidando com mais constru\u00e7\u00f5es da linguagem Taynara 7 05/05-09/05 Iniciar an\u00e1lise sem\u00e2ntica b\u00e1sica (verifica\u00e7\u00e3o de tipos e escopo) Valida\u00e7\u00e3o de tipos e vari\u00e1veis implementada Arthur 8 12/05-16/05 Continuar an\u00e1lise sem\u00e2ntica e tratar erros (vari\u00e1veis n\u00e3o declaradas, tipos incompat\u00edveis) Erros sem\u00e2nticos b\u00e1sicos detectados Brunna 9 19/05-23/05 In\u00edcio da gera\u00e7\u00e3o de c\u00f3digo C (tradu\u00e7\u00e3o b\u00e1sica de estruturas) Primeiros c\u00f3digos C sendo gerados a partir da \u00e1rvore sint\u00e1tica Genilson 10 26/05-30/05 Avan\u00e7ar na gera\u00e7\u00e3o de c\u00f3digo C (tratando mais casos e ajustes) Sa\u00edda em C funcionando para programas pequenos La\u00eds fim de semana 30/05-02/06 P2 Prepara\u00e7\u00e3o e entrega do P2 (avan\u00e7o da an\u00e1lise sem\u00e2ntica e primeira gera\u00e7\u00e3o de c\u00f3digo) x Mariana 11 02/06-06/06 Corre\u00e7\u00f5es p\u00f3s-P2 e otimiza\u00e7\u00f5es no compilador Compilador corrigido e mais robusto Taynara 12 09/06-13/06 Testes finais e adi\u00e7\u00e3o de exemplos mais complexos Compilador testado com diversos programas Arthur 13 16/06-20/06 Finaliza\u00e7\u00e3o do projeto e ajustes finos Vers\u00e3o final do compilador pronta Brunna 14 23/06-27/06 Prepara\u00e7\u00e3o dos materiais de entrega final (documenta\u00e7\u00e3o + c\u00f3digo) Projeto preparado para submiss\u00e3o Genilson dia 27/06 Entrega final Submiss\u00e3o oficial do projeto Entrega realizada La\u00eds 15 30/06-04/07 Feedback p\u00f3s-entrega e encerramento Projeto conclu\u00eddo Mariana <p>Tabela 1: Cronograma de planejamento da equipe. (Fonte: Arthur SuaresMariana Let\u00edcia, 2025)</p> <p></p>"},{"location":"entrega1/cronograma/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 10/04/2025 1.0 Repassando dados Arthur Suares Mariana Let\u00edcia 10/04/2025 1.0 Adicionando introdu\u00e7\u00e3o e planejamento de equipe Mariana Let\u00edcia Arthur Suares"},{"location":"entrega1/decisoes/","title":"4. Decis\u00f5es t\u00e9cnicas","text":""},{"location":"entrega1/decisoes/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor dd/mm/yyyy 1.0 - - -"},{"location":"entrega1/definicao/","title":"1. Introdu\u00e7\u00e3o e Defini\u00e7\u00e3o do Projeto","text":"<p>O presente projeto tem como objetivo o desenvolvimento de um compilador que traduz programas escritos em Python para a linguagem C. A proposta consiste em utilizar as ferramentas Flex e Bison para a constru\u00e7\u00e3o de um compilador simples, por\u00e9m funcional, capaz de lidar com os elementos fundamentais de ambas linguagens de programa\u00e7\u00e3o.</p> <p>A escolha por Python e C se d\u00e1 pela maior familiaridade dos integrantes da equipe com ambas as linguagens. O projeto tem car\u00e1ter acad\u00eamico e busca refor\u00e7ar o entendimento dos conceitos de compiladores, an\u00e1lise l\u00e9xica e sint\u00e1tica, bem como tradu\u00e7\u00e3o e gera\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"entrega1/definicao/#11-definicao-de-escopo","title":"1.1 Defini\u00e7\u00e3o de Escopo","text":"<p>O compilador a ser desenvolvido ter\u00e1 como escopo a convers\u00e3o de programas Python com estruturas b\u00e1sicas para c\u00f3digos equivalentes em C. Dentre os elementos que o compilador deve reconhecer e processar corretamente, est\u00e3o:</p> <ul> <li>Declara\u00e7\u00e3o e uso de vari\u00e1veis;</li> <li>Operadores aritm\u00e9ticos (adi\u00e7\u00e3o, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o, divis\u00e3o, etc.);</li> <li>Operadores relacionais (&gt;, &lt;, ==, etc.);</li> <li>Atribui\u00e7\u00f5es;</li> <li>Delimitadores, como par\u00eanteses (, ) e ponto e v\u00edrgula ;;</li> <li>Espa\u00e7os e quebras de linha, que ser\u00e3o devidamente ignorados ou tratados conforme o contexto;</li> <li>Estrutura geral de um programa: l\u00f3gica de programa\u00e7\u00e3o, declara\u00e7\u00e3o de fun\u00e7\u00f5es e procedimentos.</li> </ul> <p>Vale ressaltar que o compilador n\u00e3o tem a inten\u00e7\u00e3o de cobrir todos os recursos avan\u00e7ados da linguagem Python, como orienta\u00e7\u00e3o a objetos, estruturas complexas (como listas, dicion\u00e1rios ou fun\u00e7\u00f5es aninhadas), ou bibliotecas externas. O foco \u00e9 a tradu\u00e7\u00e3o de programas simples e lineares, o que permite uma an\u00e1lise e gera\u00e7\u00e3o de c\u00f3digo mais direta e did\u00e1tica.</p>"},{"location":"entrega1/definicao/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 11/04/2025 1.0 Vers\u00e3o inicial da introdu\u00e7\u00e3o e defini\u00e7\u00e3o de escopo do projeto. Brunna -"},{"location":"entrega1/desafios/","title":"5. Desafios encontrados pela equipe","text":""},{"location":"entrega1/desafios/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor dd/mm/yyyy 1.0 - - -"},{"location":"entrega1/linguagem/","title":"2. Liguagens de programa\u00e7\u00e3o escolhida pelo grupo","text":"<p>Para o desenvolvimento da constru\u00e7\u00e3o de um compilador, o grupo escolheu as linguagens Python e C. O compilador transformar\u00e1 c\u00f3digo escrito em Python para a linguagem C.</p>"},{"location":"entrega1/linguagem/#21-motivacao","title":"2.1 Motiva\u00e7\u00e3o","text":"<p>A decis\u00e3o se baseou no fato de que ambas as linguagens s\u00e3o conhecidas pelos integrantes do grupo, o que facilita o desenvolvimento. Al\u00e9m disso, a escolha da convers\u00e3o de Python para C se justifica pela busca por um melhor desempenho na execu\u00e7\u00e3o dos programas, j\u00e1 que a linguagem C apresenta maior efici\u00eancia em tempo de execu\u00e7\u00e3o e uso de recursos.</p>"},{"location":"entrega1/linguagem/#22-linguagem-python","title":"2.2 Linguagem Python","text":"<p>Python \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, interpretada e de prop\u00f3sito geral. Ela \u00e9 amplamente utilizada devido \u00e0 sua sintaxe simples e legibilidade, o que facilita o aprendizado e o desenvolvimento r\u00e1pido de aplica\u00e7\u00f5es. Python possui uma vasta biblioteca padr\u00e3o e suporte a diversos paradigmas de programa\u00e7\u00e3o, como orienta\u00e7\u00e3o a objetos, funcional e imperativa. \u00c9 frequentemente usada em \u00e1reas como desenvolvimento web, ci\u00eancia de dados, intelig\u00eancia artificial e automa\u00e7\u00e3o.</p>"},{"location":"entrega1/linguagem/#23-linguagem-c","title":"2.3 Linguagem C","text":"<p>C \u00e9 uma linguagem de programa\u00e7\u00e3o de baixo n\u00edvel, compilada e amplamente utilizada para o desenvolvimento de sistemas e aplica\u00e7\u00f5es que exigem alto desempenho. Ela \u00e9 conhecida por sua efici\u00eancia, controle direto sobre o hardware e uso otimizado de recursos. C \u00e9 frequentemente empregada em sistemas operacionais, drivers, softwares embarcados e outras \u00e1reas onde o desempenho \u00e9 cr\u00edtico. Sua sintaxe influenciou diversas linguagens modernas, tornando-a uma base importante no aprendizado de programa\u00e7\u00e3o.</p>"},{"location":"entrega1/linguagem/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 17/04/2025 1.0 Defini\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o escolhidas grupo La\u00eds Ramos Barbosa e Taynara Cristina Ribeiro Marcellos -"},{"location":"entrega1/solucoes/","title":"6. Solu\u00e7\u00f5es encontradas pela equipe","text":""},{"location":"entrega1/solucoes/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor dd/mm/yyyy 1.0 - - -"},{"location":"entrega1/analisador-lexico/identificadores-palavras-chave/","title":"Identificadores e Palavras-chave","text":""},{"location":"entrega1/analisador-lexico/identificadores-palavras-chave/#tokens","title":"Tokens","text":"<p>Segue abaixo a Tabela 1 contendo os tokens referentes aos identificadores e palavras-chave utilizados no compilador, al\u00e9m de suas express\u00f5es regulares e descri\u00e7\u00f5es. A escolha desses elementos foi baseada nas palavras-chave pr\u00f3pria da linguagem escolhida bem como na estrutura de identificadorres proposta pelo compiador:</p> <p></p> Token Express\u00e3o regular correspondente Campo yyval Descri\u00e7\u00e3o ID <code>[a-zA-Z_][a-zA-Z0-9_]*</code> str Designado a identifica\u00e7\u00e3o de identificadores IF <code>\"if\"</code> -- Token usado para identificar a palavra-chave if ELSE <code>\"else\"</code> -- Token usado para identificar a palavra-chave else ELIF <code>\"elif\"</code> -- Token usado para identificar a palavra-chave elif WHILE <code>\"while\"</code> -- Token usado para identificar a palavra-chave  while FOR <code>\"for\"</code> -- Token usado para identificar a palavra-chave for DEF <code>\"def\"</code> -- Token usado para identificar a palavra-chave def  RETURN <code>\"return\"</code> -- Token usado para identificar a palavra-chave return IN <code>\"in\"</code> -- Token usado para identificar a palavra-chave in TRUE <code>\"true\"</code> -- Token usado para identificar a palavra-chave true FALSE <code>\"false\"</code> -- Token usado para identificar a palavra-chave false AND <code>\"and\"</code> -- Token usado para identificar a palavra-chave and OR <code>\"or\"</code> -- Token usado para identificar a palavra-chave or NOT <code>\"not\"</code> -- Token usado para identificar a palavra-chave not CLASS <code>\"class\"</code> -- Token usado para identificar a palavra-chave class IMPORT <code>\"import\"</code> -- Token usado para identificar a palavra-chave import FROM <code>\"from\"</code> -- Token usado para identificar a palavra-chave from AS <code>\"as\"</code> -- Token usado para identificar a palavra-chave as TRY <code>\"try\"</code> -- Token usado para identificar a palavra-chave try EXCEPT <code>\"except\"</code> -- Token usado para identificar a palavra-chave except FINALLY <code>\"finally\"</code> -- Token usado para identificar a palavra-chave finally WITH <code>\"with\"</code> -- Token usado para identificar a palavra-chave with PASS <code>\"pass\"</code> -- Token usado para identificar a palavra-chave pass BREAK <code>\"break\"</code> -- Token usado para identificar a palavra-chave break CONTINUE <code>\"continue\"</code> -- Token usado para identificar a palavra-chave continue GLOBAL <code>\"global\"</code> -- Token usado para identificar a palavra-chave global NONLOCAL <code>\"nonlocal\"</code> -- Token usado para identificar a palavra-chave nonlocal LAMBDA <code>\"lambda\"</code> -- Token usado para identificar a palavra-chave lambda <p>Tabela 1: Tokens e suas respectivas express\u00f5es regulares. (Fonte: La\u00eds Ramos e Taynara Cristina, 2025)</p>"},{"location":"entrega1/analisador-lexico/identificadores-palavras-chave/#decisoes-tecnicas","title":"Decis\u00f5es t\u00e9cnicas","text":"<p>Foram listadas todas as palavras-chave desconhecidas, e realizada uma pesquisa online para compreender e identificar termos t\u00e9cnicos que n\u00e3o eram de conhecimento da equipe.</p>"},{"location":"entrega1/analisador-lexico/identificadores-palavras-chave/#desafios-encontradas","title":"Desafios Encontradas","text":"<ul> <li>Escassez de materiais sobre a tecnologia Bison.</li> <li>Interface do Bison pouco intuitiva, dificultando o entendimento de seu funcionamento.</li> <li>Dificuldade em identificar qual seria o resultado esperado para as entradas fornecidas.</li> </ul>"},{"location":"entrega1/analisador-lexico/identificadores-palavras-chave/#solucoes-adotadas","title":"Solu\u00e7\u00f5es Adotadas","text":"<ul> <li>Realiza\u00e7\u00e3o de an\u00e1lise detalhada das palavras-chave, considerando tamb\u00e9m casos de borda para validar o comportamento esperado.</li> <li>Utiliza\u00e7\u00e3o das sa\u00eddas do terminal para acompanhar e verificar se os resultados obtidos estavam alinhados \u00e0s expectativas.</li> </ul>"},{"location":"entrega1/analisador-lexico/identificadores-palavras-chave/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 28/04/2025 1.0 Cria\u00e7\u00e3o do documento e inclus\u00e3o de informa\u00e7\u00f5es sobre decis\u00f5es, desafios e solu\u00e7\u00f5es La\u00eds Ramos Barbosa 170107574 28/04/2025 1.0 Cria\u00e7\u00e3o do documento e inclus\u00e3o de informa\u00e7\u00f5es sobre decis\u00f5es, desafios e solu\u00e7\u00f5es Taynara Cristina Ribeiro Marcellos 211031833"},{"location":"entrega1/analisador-lexico/literais-comentarios/","title":"Literais e Coment\u00e1rios","text":""},{"location":"entrega1/analisador-lexico/literais-comentarios/#tokens","title":"Tokens","text":"<p>Segue abaixo a Tabela 1 contendo os tokens utilizados no compilador, al\u00e9m de suas express\u00f5es regulares e descri\u00e7\u00f5es. Essess tokens foram utilizados para representarem unidades l\u00e9xicas, utilizados tamb\u00e9m como a menor elemento que \u00e9 significativo para o compilador. Sendo assim, pensando em um conjunto de opera\u00e7\u00f5es matem\u00e1ticas, strings e opera\u00e7\u00f5es da l\u00f3gica da programa\u00e7\u00e3o, optamos por selecionar os seguintes tokens:</p> <p></p> Token Express\u00e3o regular correspondente Campo yyval Descri\u00e7\u00e3o INT_LITERAL <code>[0-9]+</code> ival Designado a identifica\u00e7\u00e3o de n\u00fameros inteiros. FLOAT_LITERAL <code>[0-9]+\\.[0-9]+</code> fval Designado a identifica\u00e7\u00e3o de n\u00fameros float. STRING_LITERAL <code>\"([^\"\\\\]|\\\\.)*\"</code> e <code>'([^'\\\\]|\\\\.)*'</code> str Designado a identifica\u00e7\u00e3o de strings. PLUS <code>\"+\"</code> -- Token usado durante opera\u00e7\u00f5es de soma MINUS <code>\"-\"</code> -- Token usado para opera\u00e7\u00f5es de subtra\u00e7\u00e3o TIMES <code>\"*\"</code> -- Token usado para opera\u00e7\u00f5es de multiplica\u00e7\u00e3o DIVIDE <code>\"/\"</code> -- Token usado para opera\u00e7\u00f5es de divis\u00e3o LPAREN <code>\"(\"</code> -- Token usado para abrir par\u00eanteses RPAREN <code>\")\"</code> -- Token usado para fechar par\u00eanteses <p>Tabela 1: Tokens e suas respectivas express\u00f5es regulares. (Fonte: Mariana Let\u00edcia, 2025)</p>"},{"location":"entrega1/analisador-lexico/literais-comentarios/#comentarios","title":"Coment\u00e1rios","text":"<p>Os coment\u00e1rios s\u00e3o elementos fundamentais a n\u00edvel de organiza\u00e7\u00e3o e documenta\u00e7\u00e3o, provendo um bom aux\u00edlio tamb\u00e9m para estudos e afins. Sendo assim, foi inclu\u00eddo o reconhecimento de coment\u00e1rios no compilador. Por\u00e9m, eles s\u00e3o ignorados atrav\u00e9s do lexer pois para o compilador em desenvolvimento, o conte\u00fado dentro do coment\u00e1rio n\u00e3o \u00e9 relevante para alguma opera\u00e7\u00e3o, servindo apenas como meio de documenta\u00e7\u00e3o de c\u00f3digo. Segue abaixo a Tabela 2 contendo os tipos de coment\u00e1rios e suas express\u00f5es regulares tratadas no compilador em quest\u00e3o:</p> Tipo de coment\u00e1rio Express\u00e3o regular correspondente Descri\u00e7\u00e3o Aspas duplas triplas <code>\"\"\"([^\"]|\\n)*?\"\"\"</code> Coment\u00e1rio de bloco Aspas simples triplas <code>'''([^']|\\n)*?'''</code> Coment\u00e1rio de bloco Hashtag <code>\"#\".*</code> Coment\u00e1rio de linha <p>Tabela 2: Coment\u00e1rios e suas respectivas express\u00f5es regulares. (Fonte: Mariana Let\u00edcia, 2025)</p>"},{"location":"entrega1/analisador-lexico/literais-comentarios/#decisoes-tecninas-tomadas","title":"Decis\u00f5es t\u00e9cninas tomadas","text":"<p>Durante a escrita da regex que identifica n\u00fameros inteiros e reias, foi escolhido identificar apenas os n\u00fameros, sem que a regex agrupasse o sinal que os n\u00fameros pudessem vir a ter. Deixando assim que uma regex separada se encarregasse de identifcar o sinal do n\u00famero, seja ele um sinal positivo <code>+</code>, ou um sinal negativo <code>-</code>.</p> <p>Al\u00e9m disso, devido a como o python permite que strings estejam flutuando dentro do c\u00f3digo fonte e possam servir de coment\u00e1rio consequentemente, foi ent\u00e3o formada as regex <code>\"\"\"([^\"]|\\n)*?\"\"\"</code> e <code>'''([^']|\\n)*?'''</code> que identificam uma string delimitada por 3 aspas duplas e simples, respectivamente. E nesse sentido, houve uma preocupa\u00e7\u00e3o para que casos em que uma string dessa forma pudesse aparecer durante o funcionamento do compilador desenvolvido. Isso devido ao caso abaixo:</p> <pre><code>\"\"\"teste\"\"\"\n'''teste'''\nstring = \"\"\"teste\"\"\"\nx = 4 \ny = 5\nz = x + y\n\nprint(\"Resultado:\", z)\n</code></pre> <p>Onde o primeiro e segundo <code>\"\"\"teste\"\"\"</code> s\u00e3o ignorados, mas o terceiro \u00e9 atribu\u00eddo a vari\u00e1vel <code>string</code>. Ent\u00e3o, esses regex retornam um <code>STRING_LITERAL</code> para que possa ser analisado posteriormente no analisador sint\u00e1tico se essa string deva ou n\u00e3o ser ignorada. Diferentemente do coment\u00e1rio de linha <code>#</code>, que realmente n\u00e3o precisa retornar nada no regex.</p>"},{"location":"entrega1/analisador-lexico/literais-comentarios/#desafios-encontrados","title":"Desafios Encontrados","text":"<p>Os principais desafios encontrados durante a execu\u00e7\u00e3o dessa primeira etapa foi primeiramente entender as estruturas b\u00e1sicas de um compilador e de que maneira se poderia organizar o grupo para dividir o desenvolvimento dele. Durante esse per\u00edodo, tivemos apoio n\u00e3o somente das aulas como do professor para auxiliar em decis\u00f5es t\u00e9cnicas principalmente. Portanto, conforme se foi aprendendo mais sobre a teoria e implementa\u00e7\u00e3o do compilador juntamente com as aulas te\u00f3ricas e pr\u00e1ticas, conseguimos iniciar o desenvolvimento do l\u00e9xico e sint\u00e1tico com sucesso.</p> <p>No entanto, parte pela qual foi sentida uma maior dificuldade foi em rela\u00e7\u00e3o sobre como identificar coment\u00e1rios e lidar com coment\u00e1rios de linha, e sobre como passar tokens do l\u00e9xico para o sint\u00e1tico.</p>"},{"location":"entrega1/analisador-lexico/literais-comentarios/#solucoes-adotadas","title":"Solu\u00e7\u00f5es Adotadas","text":"<p>As solu\u00e7\u00f5es adotadas inclu\u00edram a constru\u00e7\u00e3o de regex que conseguissem englobar os caracteres especias como o <code>\\n</code> ou <code>//</code> dentro do corpo da pr\u00f3pria string. Al\u00e9m disso, construir estruturas no arquivo <code>parser.y</code> que se integrasse com o <code>lexer.l</code> como <code>%union</code> para que fosse poss\u00edvel mandar atrav\u00e9s de fun\u00e7\u00f5es como o <code>yylval</code> , tokens j\u00e1 identificados como inteiros, reais, strings, etc. Adicionalmente, foi utilizado testes manuais e testes com um arquivo de c\u00f3digo fonte em python que pudessem estimar o funcionamento do que foi desenvolvido do <code>lexer.l</code> e do <code>parser.y</code>.</p>"},{"location":"entrega1/analisador-lexico/literais-comentarios/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 13/04/2025 1.0 Adicionando Tokens literais e de coment\u00e1rio Mariana Let\u00edcia Arthur Suares 17/04/2025 1.1 Adicionando explica\u00e7\u00e3o das decis\u00f5es t\u00e9cnicas Arthur Suares Mariana Let\u00edcia 20/04/2025 1.2 Adicionando desafios e solu\u00e7\u00f5es encontrados Arthur Suares e Mariana Let\u00edcia Mariana Let\u00edcia"},{"location":"entrega1/analisador-lexico/operadores-delimitadores-erros/","title":"Operadores, Delimitadores e Erros","text":""},{"location":"entrega1/analisador-lexico/operadores-delimitadores-erros/#tokens","title":"Tokens","text":"<p>Neste compilador, foram considerados operadores aritm\u00e9ticos b\u00e1sicos (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), operadores relacionais (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>) e delimitadores como <code>par\u00eanteses</code>, <code>colchetes</code> e <code>chaves</code>. A escolha desses elementos foi baseada na linguagem escolhida e suas possibilidades.</p> <p>A Tabela 1 abaixo cont\u00e9m os tokens referentes a operadores aritm\u00e9ticos, operadores relacionais e delimitadores utilizados no compilador, al\u00e9m de suas express\u00f5es regulares e descri\u00e7\u00f5es.</p> <p></p> Token Express\u00e3o regular correspondente Campo yyval Descri\u00e7\u00e3o PLUS <code>\"+\"</code> -- Token usado durante opera\u00e7\u00f5es de soma MINUS <code>\"-\"</code> -- Token usado para opera\u00e7\u00f5es de subtra\u00e7\u00e3o TIMES <code>\"*\"</code> -- Token usado para opera\u00e7\u00f5es de multiplica\u00e7\u00e3o DIVIDE <code>\"/\"</code> -- Token usado para opera\u00e7\u00f5es de divis\u00e3o MODULO <code>\"%\"</code> -- Token usado para obter o quociente de uma divis\u00e3o LPAREN <code>\"(\"</code> -- Token usado para abrir par\u00eanteses RPAREN <code>\")\"</code> -- Token usado para fechar par\u00eanteses LBRACKET <code>\"[\"</code> -- Token usado para abrir colchetes RBRACKET <code>\"]\"</code> -- Token usado para fechar colchetes LBRACE <code>\"{\"</code> -- Token usado para abrir chaves RBRACE <code>\"}\"</code> -- Token usado para fechar chaves COMMA <code>\",\"</code> -- Token usado para separar argumentos chamados em uma fun\u00e7\u00e3o COLON <code>\":\"</code> -- Token usado para delimitar in\u00edcio de um procedimento, fun\u00e7\u00e3o, loops ou condicionais DOT <code>\".\"</code> -- Token usado para chamada de fun\u00e7\u00f5es SEMICOLON <code>\";\"</code> -- Token usado para delimitar escopo ASSIGN <code>\"=\"</code> -- Token usado para atribui\u00e7\u00e3o EQTO <code>\"==\"</code> -- Token usado para comparar a igualdade entre dois valores NOTEQTO <code>\"!=\"</code> -- Token usado para comparar a diferen\u00e7a entre dois valores LESSER <code>\"&lt;\"</code> -- Token usado para verificar se o argumento da esquerda \u00e9 menor que o argumento da direita GREATER <code>\"&gt;\"</code> -- Token usado para verificar se o argumento da esquerda \u00e9 maior que o argumento da direita LESSEQ <code>\"&lt;=&lt;\"</code> -- Token usado para verificar se o argumento da esquerda \u00e9 menor ou igual ao argumento da direita GREATEQ <code>\"&gt;=\"</code> -- Token usado para verificar se o argumento da esquerda \u00e9 maior ou igual ao argumento da direita <p>Tabela 1: Tokens e suas respectivas express\u00f5es regulares. (Fonte: Brunna Louise, 2025)</p>"},{"location":"entrega1/analisador-lexico/operadores-delimitadores-erros/#decisoes-tecnicas","title":"Decis\u00f5es t\u00e9cnicas","text":"<p>Durante a implementa\u00e7\u00e3o dos operadores, delimitadores e do tratamento de erros no analisador l\u00e9xico, algumas decis\u00f5es espec\u00edficas foram tomadas para garantir tanto o funcionamento correto do compilador quanto uma experi\u00eancia mais clara para quem estivesse depurando o c\u00f3digo, como \u00e9 poss\u00edvel ver presentes em todas as linguagens nos tratamentos de erros.</p> <ul> <li>Operadores e Delimitadores</li> </ul> <p>A escolha por separar cada operador e delimitador em uma linha distinta no arquivo <code>lexer.l</code> foi feita com o objetivo de tornar o c\u00f3digo mais organizado e direto, evitando ambiguidade entre s\u00edmbolos parecidos (como <code>=</code> e <code>==</code>, ou <code>&lt;</code> e <code>&lt;=</code>). Essa abordagem tamb\u00e9m facilitou o mapeamento de cada s\u00edmbolo para seu respectivo token, diretamente reconhecido pelo analisador sint\u00e1tico (<code>parser.y</code>).</p> <p>Al\u00e9m disso, foram inclu\u00eddos delimitadores como <code>par\u00eanteses</code>, <code>colchetes</code> e <code>chaves</code>, bem como operadores matem\u00e1ticos (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>) e operadores relacionais (<code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&gt;</code>), permitindo que express\u00f5es mais completas fossem avaliadas diretamente pelo parser, que retorna o valor da opera\u00e7\u00e3o como uma forma simples de interpretar e testar a sintaxe do c\u00f3digo.</p> <pre><code>\"(\"             { return LPAREN; }\n\")\"             { return RPAREN; }\n\"[\"             { return LBRACKET; }\n\"]\"             { return RBRACKET; }\n\"{\"             { return LBRACE; }\n\"}\"             { return RBRACE; }\n\":\"             { return COLON; }\n\",\"             { return COMMA; }\n\".\"             { return DOT; }\n\";\"             { return SEMICOLON; }\n\n\"==\"            { return EQTO; }\n\"!=\"            { return NOTEQTO; }\n\"&lt;=\"            { return LESSEQ; }\n\"&gt;=\"            { return GREATEQ; }\n\"&lt;\"             { return LESSER; }\n\"&gt;\"             { return GREATER; }\n\n\"=\"             { return EQUAL; }  \n\"+\"             { return PLUS; }\n\"-\"             { return MINUS; }\n\"*\"             { return TIMES; }\n\"/\"             { return DIVIDE; }\n\"%\"             { return MODULO; }\n</code></pre> <ul> <li>Tratamento de Erros</li> </ul> <p>Para o tratamento de erros l\u00e9xicos, optou-se por capturar qualquer caractere n\u00e3o reconhecido com o ponto <code>.</code> no final das regras do <code>lexer.l</code>. Quando isso ocorre, uma mensagem \u00e9 impressa informando o caractere inv\u00e1lido e a linha em que ele se encontra, utilizando uma vari\u00e1vel global.</p> <p>Essa vari\u00e1vel \u00e9 incrementada a cada ocorr\u00eancia de <code>\\n</code> lida pelo analisador l\u00e9xico, permitindo acompanhar corretamente a posi\u00e7\u00e3o no c\u00f3digo-fonte. Essa decis\u00e3o foi essencial para fornecer feedback \u00fatil durante testes manuais diversos, especialmente para identificar erros simples como s\u00edmbolos inv\u00e1lidos ou digitados incorretamente.</p> <p>O token <code>ERROR</code> tamb\u00e9m foi retornado nesses casos, permitindo que o parser pudesse reconhecer e tratar essas situa\u00e7\u00f5es sem interromper a execu\u00e7\u00e3o.</p> <pre><code>LEXER\n\n\\n              { linha++; return '\\n'; }  \n[ \\t\\r]+        { /* ignorar */ }\n.               { printf(\"Caractere inv\u00e1lido: %s na linha %d\\n\", yytext, linha); return ERROR; }\n</code></pre> <pre><code>PARSER\n\nvoid yyerror(const char *s) {\n    fprintf(stderr, \"Erro sint\u00e1tico na linha: %d: %s\\n\", linha, s);\n}\n</code></pre> <ul> <li>Testes Realizados</li> </ul> <p>Os testes foram feitos com express\u00f5es variadas, combinando operadores aritm\u00e9ticos, relacionais e agrupamentos com delimitadores. Al\u00e9m disso, foram inseridos caracteres inv\u00e1lidos de prop\u00f3sito, como <code>@</code>, <code>!</code> e <code>&amp;</code>, para garantir que o tratamento de erros funcionasse corretamente e as mensagens fossem exibidas com a linha correta.</p> <pre><code>(3 + 4) * [2 - 1]\n{5 % 2} == (3)\n3 + 5 &gt; 2\n(1 + 2) * (3 - 4) / 5\n\n(3 + @)\n3 + * 2\n(4 + 5]\n1 + 2; )\n{ 1 + [ 2 * 3 }\n</code></pre> <p>Neste caso, temos as primeiras quatro linhas funcionais testando o analisador, e as posteriores sendo casos que retornar\u00e3o erro, tipo do erro e a linha em quest\u00e3o.</p>"},{"location":"entrega1/analisador-lexico/operadores-delimitadores-erros/#desafios-encontrados","title":"Desafios Encontrados","text":"<p>Durante a implementa\u00e7\u00e3o dos operadores, delimitadores e tratamento de erros no analisador l\u00e9xico, um dos principais desafios foi evitar ambiguidades entre operadores simples e compostos. Como o <code>Flex</code> segue uma l\u00f3gica sequencial, foi necess\u00e1rio organizar regras no <code>lexer.l</code> para garantir que os operadores mais longos fossem reconhecidos corretamente antes dos mais curtos, evitando conflitos na an\u00e1lise l\u00e9xica.</p> <p>Houve tamb\u00e9m a preocupa\u00e7\u00e3o em garantir que o tratamento de erros n\u00e3o interrompesse o fluxo da an\u00e1lise l\u00e9xica, deixando que seja rodado por completo para permitir que todos os erros fossem capturados conforme fossem encontrados na execu\u00e7\u00e3o, seja manual ou com um arquivo de teste.</p>"},{"location":"entrega1/analisador-lexico/operadores-delimitadores-erros/#solucoes-adotadas","title":"Solu\u00e7\u00f5es Adotadas","text":"<p>Para o tratamento de erros, foi implementada uma regra gen\u00e9rica que captura qualquer caractere que n\u00e3o casa com os padr\u00f5es definidos previamente. Nessa regra, foi inserida uma mensagem descritiva com a indica\u00e7\u00e3o do caractere inv\u00e1lido e a linha onde o erro foi identificado. A contagem de linhas foi implementada por meio da detec\u00e7\u00e3o de quebras de linha (<code>\\n</code>) no analisador l\u00e9xico, e armazenada em uma <code>vari\u00e1vel global linha</code>, que \u00e9 incrementada a cada ocorr\u00eancia de nova linha.</p> <p>J\u00e1 no <code>parser.y</code>, foram definidos tokens espec\u00edficos para os operadores e delimitadores, assegurando que a an\u00e1lise sint\u00e1tica pudesse utiliz\u00e1-los corretamente em diferentes express\u00f5es aritm\u00e9ticas e l\u00f3gicas. Para validar o funcionamento da integra\u00e7\u00e3o l\u00e9xica e sint\u00e1tica, foram realizados testes manuais utilizando express\u00f5es variadas que envolviam diferentes combina\u00e7\u00f5es de operadores, par\u00eanteses e separadores.</p>"},{"location":"entrega1/analisador-lexico/operadores-delimitadores-erros/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor Revisor 24/04/2025 1.0 Adiciona tabela de tokens Brunna Louise Mariana Let\u00edcia 24/04/2025 1.1 Decis\u00f5es, Desafios e Solu\u00e7\u00f5es Genilson Junior Mariana Let\u00edcia"}]}